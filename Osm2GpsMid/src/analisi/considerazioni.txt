Il seguente file, riporta le considerazioni sullo sviluppo di un clone di Osm2GpsMid,
da valutare anche la versione per mobile

Incominceremo ad analizzare, per grandi linee il processo di creazione del file
con il suo contenuto in binario


Come prima cosa andiamo a leggere il file di configurazione, che ci indica cosa e come
dovremmo processare. all'interno di questo file andiamo anche ad indicare il percorso
della cartella 

2) Andiamo a caricare, in memoria tutti i dati, relativi ai node way e relation
    OsmParser parser = staticVariable.getConfig().getPlanetParser();

Quando parsiamo andiamo a verificare se i nodi sono all'interno dell'area che abbiamo
definito nel file di properties.
Anche le vie sono processate tenendo in conto gli elementi presenti nel file di properties
[ 0] = () null	
[ 1] = (String) "shop"	
[ 2] = (String) "phone"	
[ 3] = (String) "route_ref"	
[ 4] = (String) "foot"	
[ 5] = (String) "aerialway"	
[ 6] = (String) "addr:street"	
[ 7] = (String) "type"	
[ 8] = (String) "boundary"	
[ 9] = (String) "historic"	
[10] = (String) "bicycle"	
[11] = (String) "religion"	
[12] = (String) "barrier"	
[13] = (String) "power"	
[14] = (String) "landuse"	
[15] = (String) "place"	
[16] = (String) "ele"	
[17] = (String) "information"	
[18] = (String) "aeroway"	
[19] = (String) "restriction"	
[20] = (String) "power_source"	
[21] = (String) "contact:phone"	
[22] = (String) "*"	
[23] = (String) "leisure"	
[24] = (String) "tourism"	
[25] = (String) "earthquake:damage"	
[26] = (String) "toll"	
[27] = (String) "junction"	
[28] = (String) "railway"	
[29] = (String) "bridge"	
[30] = (String) "motor_vehicle"	
[31] = (String) "maxspeed"	
[32] = (String) "natural"	
[33] = (String) "waterway"	
[34] = (String) "tunnel"	
[35] = (String) "highway"	
[36] = (String) "vehicle"	
[37] = (String) "cycleway"	
[38] = (String) "man_made"	
[39] = (String) "maxspeed:seasonal:winter"	
[40] = (String) "addr:housenumber"	
[41] = (String) "area"	
[42] = (String) "name"	
[43] = (String) "oneway"	
[44] = (String) "useHouseNumbers"	
[45] = (String) "building"	
[46] = (String) "impassable"	
[47] = (String) "layer"	
[48] = (String) "sport"	
[49] = (String) "addr:interpolation"	
[50] = (String) "is_in"	
[51] = (String) "amenity"	
[52] = (String) "access"	
[53] = (String) "operator"	
[54] = (String) "A key that should never be hot"	
[55] = (String) "ref"	
[56] = (String) "admin_level"	
[57] = (String) "tracktype"	
[58] = (String) "route"	
[59] = (String) "motorcar"	

Se la way ha un etichetta che si trova qui dentro allora viene presa e processata correttamente
In base all'elenco delle way così processato, andiamo a prendere in considerazioni la lista dei nodi
che fanno capo alla singola way
Medesimo discorso viene fatto per le relation con la differenza che vengono effettuare una serie di considerazioni
al contorno sugli elementi che stiamo processando; in dettaglio

Incomincianamo con il prendere in considerazione, come fatto per le way tutti gli attributi che si trovano
all'interno della lista presente prima, aggiungendo ogni elemento trovato all'interno di un hashmap
Una volta che abbiamo Riempito la mappa degli elementi, andiamo a verificare se

    1) Se gli elementi che compongono la relation risultano essere composte da node
       andiamo a verificare se la node che stiamo processando in quel momento è stata
       estratta oppure no; nel primo caso non facciamo nulla, mentre nel secondo 
       dobbiamo andare a invocare questa r.setPartial(); e continuare il processamento delle
       way che compongono la relation.
       Il metodo setPartial non fa altro che andare a settare a true una variabile interna
       della relation

    2) Se gli elementi che compongono la relation risultano essere composte da way
       andiamo a verificare se la way che stiamo processando in quel momento è stata
       estratta oppure no; nel primo caso non facciamo nulla, mentre nel secondo 
       dobbiamo andare a invocare questa r.setPartial(); e continuare il processamento delle
       way che compongono la relation.
       Il metodo setPartial non fa altro che andare a settare a true una variabile interna
       della relation


Al termine di questo giro elaborativo, per verificare il legame fra le relation che stiamo 
processando in quel momento e i nodi, way o altre relation, dobbiamo effettuare altre
verifiche sui dati appena estratti, ovvero:

1) Verifichiamo se la relation r.isValid(), ovvero se la relazione che stiamo processando
   risulta essere composta da una lista di node/way o relation con almeno un elemento
   Dopo di che effettuiamo queste considerazioni:

            a)  Se il type della relation risulta essere type.equalsIgnoreCase("route") allora è valido
            b)  Se il type della relation risulta essere type.equalsIgnoreCase("restriction") allora
                Per esempio, la relation 1562241 presenta una restrizione nel girare a sinistra
                
                Nodo 25663395 come via
                Percorso Mauerstraße (65040958) come to
                Percorso Leipziger Straße (110785555) come from

                Queste informazioni vengono prese dal dettaglio della relazione, ovvero:

                <member type="node" ref="25663395" role="via"/>
                <member type="way" ref="65040958" role="to"/>
                <member type="way" ref="110785555" role="from"/>

                Praticamente andiamo a selezione tutti gli elementi che costituiscono il percorso
                andando a selezionare l'elemento di raccordo......
                Nel caso in cui si presentano situazioni con molti elementi con il medesimo role
                allora abbiamo un problema

    Solamente nel secondo caso, oltretutto se abbiamo una restriction e risulta esserci un elemento di tipo via
    allora dobbiamo compiere le seguenti operazioni
                
    a) Verifichiamo che l'elemento che ha role via, sia effettivamente una via
        se Si il metodo ritorna true, false altrimenti.

        ° False     = In questo caso, andiamo ad invocare il metodo 
                      addTurnRestriction(viaNodeOrWayRef, turnRestriction);
                      A cui andiamo a passare l'elemento viaNodeOrWayRef che contiene in questo caso un riferimento ad un nodo
                      e come parametro l'oggetto turnRestriction
                        

                      L'oggetti TurnRestriction nel costruttore utilizza la relation per identificare la way di tipo
                      from e quella di tipo to per cui avremmo
                      
                      From -> 110785555
                      To   -> 65040958

                      Dopo di che andiamo ad effettuare l'analisi sul tipo di restriction che abbiamo e la settiamo
                      come Flags

        
    



 
